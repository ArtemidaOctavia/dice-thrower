{"version":3,"sources":["components/main/Main.module.css","redux/mainReducer.js","components/main/MainContainer.jsx","components/main/Main.jsx","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","numberOfDices","requiredValue","results","setResults","type","MainContainer","connect","state","main","dispatch","setNumberOfDices","setRequiredValue","throwDices","number","result","i","rand","Math","floor","random","push","props","onChange","event","target","value","className","styles","input","placeholder","onClick","filter","length","minorResult","reducers","combineReducers","action","store","createStore","applyMiddleware","ReduxThunk","window","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.547ee06e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Main_input__3UDot\",\"minorResult\":\"Main_minorResult__2kt9T\"};","let initialState = {\r\n    numberOfDices: null,\r\n    requiredValue: null,\r\n    results: null,\r\n  }\r\n;\r\n\r\nexport const mainReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    default:\r\n      return {\r\n        ...state\r\n      };\r\n    case 'SET-NUMBER-OF-DICES':\r\n      return {\r\n        ...state,\r\n        numberOfDices: action.numberOfDices\r\n      };\r\n    case 'SET-REQUIRED-VALUE':\r\n      return {\r\n        ...state,\r\n        requiredValue: action.requiredValue\r\n      };\r\n    case 'SET-RESULTS':\r\n      return {\r\n        ...state,\r\n        results: action.results\r\n      }\r\n  }\r\n};\r\n\r\nexport const throwDices = (number) => {\r\n  let result = [];\r\n  for (let i = 0; i < number; i++) {\r\n    let rand = Math.floor(1 + Math.random() * (6 + 1 - 1));\r\n    result.push(rand)\r\n  }\r\n  return (dispatch) => {\r\n    dispatch(setResults(result))\r\n  }\r\n};\r\n\r\nexport const setNumberOfDices = (numberOfDices) => ({type:'SET-NUMBER-OF-DICES', numberOfDices});\r\nexport const setRequiredValue = (requiredValue) => ({type:'SET-REQUIRED-VALUE', requiredValue});\r\nexport const setResults = (results) => ({type:'SET-RESULTS', results});","import React from 'react';\r\nimport {Main} from \"./Main\";\r\nimport {connect} from \"react-redux\";\r\nimport {setNumberOfDices, setRequiredValue, throwDices} from \"../../redux/mainReducer\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    numberOfDices: state.main.numberOfDices,\r\n    requiredValue: state.main.requiredValue,\r\n    results: state.main.results\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setNumberOfDices: (numberOfDices) => dispatch(setNumberOfDices(numberOfDices)),\r\n    setRequiredValue: (requiredValue) => dispatch(setRequiredValue(requiredValue)),\r\n    throwDices: (number) => dispatch(throwDices(number))\r\n  }\r\n};\r\n\r\nexport const MainContainer = connect(mapStateToProps, mapDispatchToProps)(Main);","import React from 'react';\r\nimport styles from './Main.module.css';\r\n\r\nexport const Main = (props) => {\r\n  return <div>\r\n    <div>Throw <input onChange={(event) => props.setNumberOfDices(event.target.value)} className={styles.input}\r\n                      placeholder={`number of dices`}/> dices\r\n    </div>\r\n    <div>for <input onChange={(event) => props.setRequiredValue(event.target.value)} className={styles.input}\r\n                    placeholder={`1`}/>+\r\n    </div>\r\n    <div>\r\n      <button onClick={() => props.throwDices(props.numberOfDices)}>Throw</button>\r\n    </div>\r\n    <div>\r\n      <div>Your result: { props.results ? props.results.filter((number) => number >= props.requiredValue).length : ''}</div>\r\n      <span className={styles.minorResult}>you got: {props.results ? props.results.filter((number) => number === 1).length: ''} of ones</span>\r\n      <span className={styles.minorResult}>you got: {props.results ? props.results.filter((number) => number === 2).length: ''} of twos</span>\r\n      <span className={styles.minorResult}>you got: {props.results ? props.results.filter((number) => number === 3).length: ''} of threes</span>\r\n      <span className={styles.minorResult}>you got: {props.results ? props.results.filter((number) => number === 4).length: ''} of fours</span>\r\n      <span className={styles.minorResult}>you got: {props.results ? props.results.filter((number) => number === 5).length: ''} of fives</span>\r\n      <span className={styles.minorResult}>you got: {props.results ? props.results.filter((number) => number === 6).length: ''} of sixes</span>\r\n    </div>\r\n  </div>\r\n};","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {mainReducer} from \"./mainReducer\";\r\nimport ReduxThunk from 'redux-thunk'\r\n\r\nconst reducers = combineReducers({\r\n  main: mainReducer\r\n});\r\n\r\nexport const store = createStore(reducers, applyMiddleware(ReduxThunk));\r\n\r\nwindow.store = store;","import React from 'react';\nimport './App.css';\nimport {MainContainer} from \"./components/main/MainContainer\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\nfunction App() {\n  return (\n    <div>\n      <Provider store={store}>\n        <MainContainer/>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}